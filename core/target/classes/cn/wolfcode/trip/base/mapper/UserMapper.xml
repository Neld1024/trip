<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="cn.wolfcode.trip.base.mapper.UserMapper">
    <resultMap id="BaseResultMap" type="cn.wolfcode.trip.base.domain.User">
        <id column="id" jdbcType="BIGINT" property="id"/>
        <result column="email" jdbcType="VARCHAR" property="email"/>
        <result column="nickName" jdbcType="VARCHAR" property="nickName"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="place" jdbcType="VARCHAR" property="place"/>
        <result column="headImgUrl" jdbcType="VARCHAR" property="headImgUrl"/>
        <result column="gender" jdbcType="INTEGER" property="gender"/>
        <result column="coverImgUrl" jdbcType="VARCHAR" property="coverImgUrl"/>
        <result column="sign" jdbcType="VARCHAR" property="sign"/>
    </resultMap>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
        DELETE FROM user
        WHERE id = #{id,jdbcType=BIGINT}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id" parameterType="cn.wolfcode.trip.base.domain.User"
            useGeneratedKeys="true">
        INSERT INTO user (email, nickName, password,
                          place, headImgUrl, gender,
                          coverImgUrl, sign)
        VALUES (#{email,jdbcType=VARCHAR}, #{nickName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR},
                #{place,jdbcType=VARCHAR}, #{headImgUrl,jdbcType=VARCHAR}, #{gender,jdbcType=INTEGER},
                #{coverImgUrl,jdbcType=VARCHAR}, #{sign,jdbcType=VARCHAR})
    </insert>
    <update id="updateByPrimaryKey" parameterType="cn.wolfcode.trip.base.domain.User">
        UPDATE user
        SET
            nickName    = #{nickName,jdbcType=VARCHAR},

            place       = #{place,jdbcType=VARCHAR},
            headImgUrl  = #{headImgUrl,jdbcType=VARCHAR},
            gender      = #{gender,jdbcType=INTEGER},
            coverImgUrl = #{coverImgUrl,jdbcType=VARCHAR},
            sign        = #{sign,jdbcType=VARCHAR}
        WHERE id = #{id,jdbcType=BIGINT}
    </update>
    <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
            id,
            email,
            nickName,
            password,
            place,
            headImgUrl,
            gender,
            coverImgUrl,
            sign
        FROM user
        WHERE id = #{id,jdbcType=BIGINT}
    </select>
    <select id="selectAll" resultMap="BaseResultMap">
        SELECT
            id,
            email,
            nickName,
            password,
            place,
            headImgUrl,
            gender,
            coverImgUrl,
            sign
        FROM user

    </select>
    <!--
        指定将查询到的每行数据封装成什么类型的对象
    -->
    <select id="selectForList" resultType="cn.wolfcode.trip.base.domain.User">
        SELECT
        id,
        email,
        nickName,
        password,
        place,
        headImgUrl,
        gender,
        coverImgUrl,
        sign
        FROM user

        <where>

            <if test="keyword != null and keyword != ''">
                and nickname like concat("%",#{keyword},"%") or email like concat("%",#{keyword},"%")
            </if>

        </where>
    </select>
    <select id="selectByEmail" resultType="cn.wolfcode.trip.base.domain.User">
        SELECT
            id,
            email,
            nickName,
            password,
            place,
            headImgUrl,
            gender,
            coverImgUrl,
            sign
        FROM user
        WHERE email = #{email}
    </select>
    <select id="selectByEmailAndPassword" resultType="cn.wolfcode.trip.base.domain.User">
        SELECT
            id,
            email,
            nickName,
            password,
            place,
            headImgUrl,
            gender,
            coverImgUrl,
            sign
        FROM user
        WHERE email = #{email} AND password = #{password}
    </select>
</mapper>